name: Deploy to Production

on:
  workflow_run:
    workflows: ["Build Backend", "Build Frontend"]
    types: [completed]
    branches: [main, master]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy (e.g., v1.0.0 or main-abc1234)'
        required: true
        type: string
      deploy_backend:
        description: 'Deploy backend service'
        required: true
        type: boolean
        default: true
      deploy_frontend:
        description: 'Deploy frontend service'
        required: true
        type: boolean
        default: true

permissions:
  contents: write
  id-token: write

env:
  REGISTRY: registry-3272c4a82a-fireinsurance-prod.apps.ir-central1.arvancaas.ir
  REGISTRY_USERNAME: noyanregistry
  ENVIRONMENT: prod
  NAMESPACE: fireinsurance-prod

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: production
    # Run if:
    # 1. Manual trigger with deploy_backend=true, OR
    # 2. Build Backend workflow completed successfully on release
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.deploy_backend) ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.name == 'Build Backend' &&
       github.event.workflow_run.event == 'release')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Retrieve secrets from Vault
        uses: hashicorp/vault-action@v3
        with:
          method: jwt
          url: https://noyanvault.paratechco.com
          role: github-actions
          secrets: |
            secret/data/fireinsurance/prod kubeconfig | KUBECONFIG_CONTENT ;
            secret/data/fireinsurance/prod database_connection_string | DATABASE_CONNECTION_STRING ;
            secret/data/fireinsurance/prod jwt_signing_key | JWT_SIGNING_KEY ;
            secret/data/fireinsurance/prod sms_provider_base_url | SMS_PROVIDER_BASE_URL ;
            secret/data/fireinsurance/prod sms_provider_username | SMS_PROVIDER_USERNAME ;
            secret/data/fireinsurance/prod sms_provider_password | SMS_PROVIDER_PASSWORD ;
            secret/data/fireinsurance/prod saman_services_base_url | SAMAN_SERVICES_BASE_URL ;
            secret/data/fireinsurance/prod saman_services_key | SAMAN_SERVICES_KEY ;
            secret/data/fireinsurance/prod nextauth_secret | NEXTAUTH_SECRET ;
            secret/data/fireinsurance/prod recaptcha_site_key | RECAPTCHA_SITE_KEY

      - name: Setup Kubernetes tools
        uses: ./.github/actions/setup-k8s-tools

      - name: Configure kubectl
        uses: ./.github/actions/configure-kubectl
        with:
          kubeconfig-content: ${{ env.KUBECONFIG_CONTENT }}

      - name: Determine image tag
        id: image-tag
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            IMAGE_TAG="${{ github.event.release.tag_name }}"
          elif [ -n "${{ inputs.image_tag }}" ]; then
            IMAGE_TAG="${{ inputs.image_tag }}"
          else
            IMAGE_TAG="main-${GITHUB_SHA::7}"
          fi
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Deploying with image tag: ${IMAGE_TAG}"

      - name: Update kustomization for backend
        uses: ./.github/actions/update-kustomization
        with:
          overlay-path: infra/k8s/overlays/prod
          service-name: backend
          registry: ${{ env.REGISTRY }}
          image-name: backend
          image-tag: ${{ steps.image-tag.outputs.tag }}
          environment: ${{ env.ENVIRONMENT }}
          branch: ${{ github.ref_name }}

      - name: Manage backend secrets
        uses: ./.github/actions/manage-k8s-secrets
        with:
          namespace: ${{ env.NAMESPACE }}
          database-connection-string: ${{ env.DATABASE_CONNECTION_STRING }}
          jwt-signing-key: ${{ env.JWT_SIGNING_KEY }}
          sms-provider-base-url: ${{ env.SMS_PROVIDER_BASE_URL }}
          sms-provider-username: ${{ env.SMS_PROVIDER_USERNAME }}
          sms-provider-password: ${{ env.SMS_PROVIDER_PASSWORD }}
          saman-services-base-url: ${{ env.SAMAN_SERVICES_BASE_URL }}
          saman-services-key: ${{ env.SAMAN_SERVICES_KEY }}
          nextauth-secret: ${{ env.NEXTAUTH_SECRET }}
          recaptcha-site-key: ${{ env.RECAPTCHA_SITE_KEY }}

      - name: Deploy backend to Kubernetes
        uses: ./.github/actions/deploy-to-k8s
        with:
          overlay-path: infra/k8s/overlays/prod
          namespace: ${{ env.NAMESPACE }}
          deploy-backend: 'true'
          deploy-frontend: 'false'
          timeout: 10m

      - name: Run smoke tests
        run: |
          echo "TODO: Add smoke tests here"
          # Example:
          # BACKEND_POD=$(kubectl get pod -n ${{ env.NAMESPACE }} -l app=backend -o jsonpath='{.items[0].metadata.name}')
          # kubectl exec -n ${{ env.NAMESPACE }} $BACKEND_POD -- curl -f http://localhost/health || exit 1

      - name: Deployment summary
        if: always()
        run: |
          echo "## Backend Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespace**: ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: ${{ steps.image-tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Image**: ${{ env.REGISTRY }}/backend:${{ steps.image-tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY

  deploy-frontend:
    runs-on: ubuntu-latest
    environment: production
    # Run if:
    # 1. Manual trigger with deploy_frontend=true, OR
    # 2. Build Frontend workflow completed successfully on release
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.deploy_frontend) ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.name == 'Build Frontend' &&
       github.event.workflow_run.event == 'release')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Retrieve secrets from Vault
        uses: hashicorp/vault-action@v3
        with:
          method: jwt
          url: https://noyanvault.paratechco.com
          role: github-actions
          secrets: |
            secret/data/fireinsurance/prod kubeconfig | KUBECONFIG_CONTENT ;
            secret/data/fireinsurance/prod database_connection_string | DATABASE_CONNECTION_STRING ;
            secret/data/fireinsurance/prod jwt_signing_key | JWT_SIGNING_KEY ;
            secret/data/fireinsurance/prod sms_provider_base_url | SMS_PROVIDER_BASE_URL ;
            secret/data/fireinsurance/prod sms_provider_username | SMS_PROVIDER_USERNAME ;
            secret/data/fireinsurance/prod sms_provider_password | SMS_PROVIDER_PASSWORD ;
            secret/data/fireinsurance/prod saman_services_base_url | SAMAN_SERVICES_BASE_URL ;
            secret/data/fireinsurance/prod saman_services_key | SAMAN_SERVICES_KEY ;
            secret/data/fireinsurance/prod nextauth_secret | NEXTAUTH_SECRET ;
            secret/data/fireinsurance/prod recaptcha_site_key | RECAPTCHA_SITE_KEY

      - name: Setup Kubernetes tools
        uses: ./.github/actions/setup-k8s-tools

      - name: Configure kubectl
        uses: ./.github/actions/configure-kubectl
        with:
          kubeconfig-content: ${{ env.KUBECONFIG_CONTENT }}

      - name: Determine image tag
        id: image-tag
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            IMAGE_TAG="${{ github.event.release.tag_name }}"
          elif [ -n "${{ inputs.image_tag }}" ]; then
            IMAGE_TAG="${{ inputs.image_tag }}"
          else
            IMAGE_TAG="main-${GITHUB_SHA::7}"
          fi
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Deploying with image tag: ${IMAGE_TAG}"

      - name: Update kustomization for frontend
        uses: ./.github/actions/update-kustomization
        with:
          overlay-path: infra/k8s/overlays/prod
          service-name: frontend
          registry: ${{ env.REGISTRY }}
          image-name: frontend
          image-tag: ${{ steps.image-tag.outputs.tag }}
          environment: ${{ env.ENVIRONMENT }}
          branch: ${{ github.ref_name }}

      - name: Manage frontend secrets
        uses: ./.github/actions/manage-k8s-secrets
        with:
          namespace: ${{ env.NAMESPACE }}
          database-connection-string: ${{ env.DATABASE_CONNECTION_STRING }}
          jwt-signing-key: ${{ env.JWT_SIGNING_KEY }}
          sms-provider-base-url: ${{ env.SMS_PROVIDER_BASE_URL }}
          sms-provider-username: ${{ env.SMS_PROVIDER_USERNAME }}
          sms-provider-password: ${{ env.SMS_PROVIDER_PASSWORD }}
          saman-services-base-url: ${{ env.SAMAN_SERVICES_BASE_URL }}
          saman-services-key: ${{ env.SAMAN_SERVICES_KEY }}
          nextauth-secret: ${{ env.NEXTAUTH_SECRET }}
          recaptcha-site-key: ${{ env.RECAPTCHA_SITE_KEY }}

      - name: Deploy frontend to Kubernetes
        uses: ./.github/actions/deploy-to-k8s
        with:
          overlay-path: infra/k8s/overlays/prod
          namespace: ${{ env.NAMESPACE }}
          deploy-backend: 'false'
          deploy-frontend: 'true'
          timeout: 10m

      - name: Run smoke tests
        run: |
          echo "TODO: Add smoke tests here"
          # Example:
          # FRONTEND_POD=$(kubectl get pod -n ${{ env.NAMESPACE }} -l app=frontend -o jsonpath='{.items[0].metadata.name}')
          # kubectl exec -n ${{ env.NAMESPACE }} $FRONTEND_POD -- curl -f http://localhost/ || exit 1

      - name: Deployment summary
        if: always()
        run: |
          echo "## Frontend Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespace**: ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: ${{ steps.image-tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Image**: ${{ env.REGISTRY }}/frontend:${{ steps.image-tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
