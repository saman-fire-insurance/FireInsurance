name: Deploy PR Preview

on:
  workflow_run:
    workflows: ["Build Backend", "Build Frontend"]
    types: [completed]

permissions:
  contents: write
  id-token: write
  pull-requests: write
  actions: read

env:
  REGISTRY: registry-3272c4a82a-fireinsurance-prod.apps.ir-central1.arvancaas.ir
  REGISTRY_USERNAME: noyanregistry
  BACKEND_IMAGE_NAME: backend
  FRONTEND_IMAGE_NAME: frontend
  ENVIRONMENT: preview

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    # Only run if build workflow succeeded and was triggered by a PR
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get PR number from workflow run
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.workflow_run.pull_requests[0]?.number;
            if (!prNumber) {
              core.setFailed('Could not find PR number');
              return;
            }
            core.setOutput('number', prNumber);
            return prNumber;

      - name: Check if both builds are complete
        id: check-builds
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.workflow_run.head_sha;
            const prNumber = ${{ steps.pr.outputs.number }};

            // Get workflow runs for this SHA
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event: 'pull_request',
              head_sha: sha,
              status: 'completed'
            });

            // Check if both Build Backend and Build Frontend succeeded
            const backendBuild = runs.workflow_runs.find(r => r.name === 'Build Backend' && r.conclusion === 'success');
            const frontendBuild = runs.workflow_runs.find(r => r.name === 'Build Frontend' && r.conclusion === 'success');

            const bothComplete = backendBuild && frontendBuild;

            core.setOutput('both_complete', bothComplete ? 'true' : 'false');
            core.setOutput('backend_ready', backendBuild ? 'true' : 'false');
            core.setOutput('frontend_ready', frontendBuild ? 'true' : 'false');

            if (!bothComplete) {
              console.log('⏳ Waiting for both builds to complete...');
              console.log(`Backend: ${backendBuild ? '✅' : '⏸️'}`);
              console.log(`Frontend: ${frontendBuild ? '✅' : '⏸️'}`);
            }

            return bothComplete;

      - name: Skip deployment if builds not ready
        if: steps.check-builds.outputs.both_complete != 'true'
        run: |
          echo "⏸️ Skipping deployment - waiting for all builds to complete"
          echo "Backend build: ${{ steps.check-builds.outputs.backend_ready }}"
          echo "Frontend build: ${{ steps.check-builds.outputs.frontend_ready }}"
          exit 0

      - name: Set environment variables
        if: steps.check-builds.outputs.both_complete == 'true'
        id: env
        run: |
          PR_NUMBER=${{ steps.pr.outputs.number }}
          NAMESPACE="fireinsurance-pr-${PR_NUMBER}"
          SHORT_SHA="${{ github.event.workflow_run.head_sha }}"
          SHORT_SHA="${SHORT_SHA:0:7}"
          IMAGE_TAG="pr-${PR_NUMBER}-${SHORT_SHA}"

          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "namespace=${NAMESPACE}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

          echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_ENV
          echo "NAMESPACE=${NAMESPACE}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Retrieve secrets from Vault
        if: steps.check-builds.outputs.both_complete == 'true'
        uses: hashicorp/vault-action@v3
        with:
          method: jwt
          url: https://noyanvault.paratechco.com
          role: github-actions
          secrets: |
            secret/data/fireinsurance/preview kubeconfig | KUBECONFIG_CONTENT ;
            secret/data/fireinsurance/preview database_connection_string | DATABASE_CONNECTION_STRING ;
            secret/data/fireinsurance/preview jwt_signing_key | JWT_SIGNING_KEY ;
            secret/data/fireinsurance/preview sms_provider_base_url | SMS_PROVIDER_BASE_URL ;
            secret/data/fireinsurance/preview sms_provider_username | SMS_PROVIDER_USERNAME ;
            secret/data/fireinsurance/preview sms_provider_password | SMS_PROVIDER_PASSWORD ;
            secret/data/fireinsurance/preview saman_services_base_url | SAMAN_SERVICES_BASE_URL ;
            secret/data/fireinsurance/preview saman_services_key | SAMAN_SERVICES_KEY ;
            secret/data/fireinsurance/preview nextauth_secret | NEXTAUTH_SECRET ;
            secret/data/fireinsurance/preview recaptcha_site_key | RECAPTCHA_SITE_KEY

      - name: Setup Kubernetes tools
        if: steps.check-builds.outputs.both_complete == 'true'
        uses: ./.github/actions/setup-k8s-tools

      - name: Configure kubectl
        if: steps.check-builds.outputs.both_complete == 'true'
        uses: ./.github/actions/configure-kubectl
        with:
          kubeconfig-content: ${{ env.KUBECONFIG_CONTENT }}

      - name: Create namespace for PR
        if: steps.check-builds.outputs.both_complete == 'true'
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Namespace
          metadata:
            name: ${{ env.NAMESPACE }}
            labels:
              name: ${{ env.NAMESPACE }}
              environment: preview
              pr-number: "${{ env.PR_NUMBER }}"
          EOF

      - name: Prepare kustomization for PR
        if: steps.check-builds.outputs.both_complete == 'true'
        run: |
          cd infra/k8s/overlays/preview

          # Set namespace
          kustomize edit set namespace ${{ env.NAMESPACE }}

          # Update image tags
          kustomize edit set image backend=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          kustomize edit set image frontend=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

          # Update ConfigMaps with PR-specific values
          kustomize edit add configmap backend-config --behavior=merge \
            --from-literal=jwt-issuer="https://api-pr-${{ env.PR_NUMBER }}.fireinsurance.example.com" \
            --from-literal=jwt-audience="https://api-pr-${{ env.PR_NUMBER }}.fireinsurance.example.com"

          kustomize edit add configmap frontend-config --behavior=merge \
            --from-literal=nextauth-url="https://pr-${{ env.PR_NUMBER }}.fireinsurance.example.com" \
            --from-literal=api-url="http://backend:80"

          cat kustomization.yaml

      - name: Commit kustomization changes to git
        if: steps.check-builds.outputs.both_complete == 'true'
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Commit changes
          git add infra/k8s/overlays/preview/kustomization.yaml
          git commit -m "chore(k8s): deploy preview PR #${{ env.PR_NUMBER }} - ${{ env.IMAGE_TAG }}

          Deployed preview environment:
          - Namespace: ${{ env.NAMESPACE }}
          - Backend: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          - Frontend: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

          Triggered by: ${{ github.actor }}
          Workflow: ${{ github.workflow }}
          Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Push to the PR branch
          git push origin HEAD:${{ github.head_ref }}

      - name: Manage Kubernetes secrets
        if: steps.check-builds.outputs.both_complete == 'true'
        uses: ./.github/actions/manage-k8s-secrets
        with:
          namespace: ${{ env.NAMESPACE }}
          database-connection-string: ${{ env.DATABASE_CONNECTION_STRING }}
          jwt-signing-key: ${{ env.JWT_SIGNING_KEY }}
          sms-provider-base-url: ${{ env.SMS_PROVIDER_BASE_URL }}
          sms-provider-username: ${{ env.SMS_PROVIDER_USERNAME }}
          sms-provider-password: ${{ env.SMS_PROVIDER_PASSWORD }}
          saman-services-base-url: ${{ env.SAMAN_SERVICES_BASE_URL }}
          saman-services-key: ${{ env.SAMAN_SERVICES_KEY }}
          nextauth-secret: ${{ env.NEXTAUTH_SECRET }}
          recaptcha-site-key: ${{ env.RECAPTCHA_SITE_KEY }}

      - name: Deploy to Kubernetes
        if: steps.check-builds.outputs.both_complete == 'true'
        uses: ./.github/actions/deploy-to-k8s
        with:
          overlay-path: infra/k8s/overlays/preview
          namespace: ${{ env.NAMESPACE }}
          deploy-backend: 'true'
          deploy-frontend: 'true'
          timeout: 5m

      - name: Get deployment status
        if: steps.check-builds.outputs.both_complete == 'true'
        id: deployment
        run: |
          # Get service URLs (adjust based on your setup)
          BACKEND_SERVICE=$(kubectl get svc backend -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")
          FRONTEND_SERVICE=$(kubectl get svc frontend -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")

          echo "backend_url=${BACKEND_SERVICE}" >> $GITHUB_OUTPUT
          echo "frontend_url=${FRONTEND_SERVICE}" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: steps.check-builds.outputs.both_complete == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ env.PR_NUMBER }};
            const namespace = '${{ env.NAMESPACE }}';
            const imageTag = '${{ env.IMAGE_TAG }}';

            const comment = `## 🚀 Preview Environment Deployed

            Your PR preview environment has been deployed successfully!

            **Details:**
            - **Namespace**: \`${namespace}\`
            - **Image Tag**: \`${imageTag}\`
            - **Backend Image**: \`${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${imageTag}\`
            - **Frontend Image**: \`${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${imageTag}\`

            **Note**: URLs depend on your ArvanCloud configuration. Check your cluster's service/ingress setup.

            To view the deployment:
            \`\`\`bash
            kubectl get all -n ${namespace}
            \`\`\`

            This preview environment will be automatically deleted when the PR is closed.
            `;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Deployment summary
        if: always()
        run: |
          if [ "${{ steps.check-builds.outputs.both_complete }}" == "true" ]; then
            echo "## PR Preview Deployment Summary" >> $GITHUB_STEP_SUMMARY
            echo "- **PR Number**: #${{ env.PR_NUMBER }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Namespace**: ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Image Tag**: ${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Backend Image**: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Frontend Image**: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## PR Preview Deployment Skipped" >> $GITHUB_STEP_SUMMARY
            echo "⏸️ Waiting for both backend and frontend builds to complete" >> $GITHUB_STEP_SUMMARY
            echo "- Backend build: ${{ steps.check-builds.outputs.backend_ready }}" >> $GITHUB_STEP_SUMMARY
            echo "- Frontend build: ${{ steps.check-builds.outputs.frontend_ready }}" >> $GITHUB_STEP_SUMMARY
          fi
