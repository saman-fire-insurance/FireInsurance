// <auto-generated />
using System;
using System.Collections.Generic;
using FireInsurance.Damage.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FireInsurance.Damage.Infrastructure.Migrations
{
    [DbContext(typeof(DamageDbContext))]
    [Migration("20251024182315_Insurer-Props")]
    partial class InsurerProps
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("damage")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid")
                        .HasColumnName("province_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("ProvinceId")
                        .HasDatabaseName("ix_cities_province_id");

                    b.ToTable("cities", "damage");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.DamageClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("IncidentId")
                        .HasColumnType("uuid")
                        .HasColumnName("incident_id");

                    b.PrimitiveCollection<List<Guid>>("InsuranceFileIds")
                        .HasColumnType("uuid[]")
                        .HasColumnName("insurance_file_ids");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("OwnershipTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("ownership_type_id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("phone_number");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("serial_number");

                    b.PrimitiveCollection<List<Guid>>("StakeHolderIds")
                        .HasColumnType("uuid[]")
                        .HasColumnName("stake_holder_ids");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid?>("ThirdPartyCoverageId")
                        .HasColumnType("uuid")
                        .HasColumnName("third_party_coverage_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_damage_claims");

                    b.HasIndex("IncidentId")
                        .HasDatabaseName("ix_damage_claims_incident_id");

                    b.HasIndex("OwnershipTypeId")
                        .HasDatabaseName("ix_damage_claims_ownership_type_id");

                    b.HasIndex("ThirdPartyCoverageId")
                        .HasDatabaseName("ix_damage_claims_third_party_coverage_id");

                    b.ToTable("damage_claims", "damage");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.DamagedObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CoverageId")
                        .HasColumnType("uuid")
                        .HasColumnName("coverage_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DamageClaimId")
                        .HasColumnType("uuid")
                        .HasColumnName("damage_claim_id");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<decimal>("EstimatedLoss")
                        .HasColumnType("numeric")
                        .HasColumnName("estimated_loss");

                    b.Property<Guid>("InsurableObjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("insurable_object_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_damaged_objects");

                    b.HasIndex("DamageClaimId")
                        .HasDatabaseName("ix_damaged_objects_damage_claim_id");

                    b.HasIndex("InsurableObjectId")
                        .HasDatabaseName("ix_damaged_objects_insurable_object_id");

                    b.ToTable("damaged_objects", "damage");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.Incident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("address");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FireStationName")
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("fire_station_name");

                    b.PrimitiveCollection<List<Guid>>("FireStationReportFileIds")
                        .HasColumnType("uuid[]")
                        .HasColumnName("fire_station_report_file_ids");

                    b.Property<bool>("HasFireStationReport")
                        .HasColumnType("boolean")
                        .HasColumnName("has_fire_station_report");

                    b.Property<bool>("HasPoliceReport")
                        .HasColumnType("boolean")
                        .HasColumnName("has_police_report");

                    b.Property<bool>("HasWeatherReport")
                        .HasColumnType("boolean")
                        .HasColumnName("has_weather_report");

                    b.Property<string>("IncidentCause")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("incident_cause");

                    b.PrimitiveCollection<List<Guid>>("IncidentImageFileIds")
                        .HasColumnType("uuid[]")
                        .HasColumnName("incident_image_file_ids");

                    b.Property<Guid>("IncidentTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("incident_type_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("OccuranceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurance_date");

                    b.Property<Guid>("OwnershipTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("ownership_type_id");

                    b.Property<DateTime?>("PoliceReportDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("police_report_date");

                    b.PrimitiveCollection<List<Guid>>("PoliceReportFileIds")
                        .HasColumnType("uuid[]")
                        .HasColumnName("police_report_file_ids");

                    b.Property<string>("PoliceReportNumber")
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("police_report_number");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("postal_code");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid")
                        .HasColumnName("province_id");

                    b.Property<string>("RestraintDescription")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("restraint_description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("WeatherCondition")
                        .HasColumnType("integer")
                        .HasColumnName("weather_condition");

                    b.Property<int?>("WeatherReportProbability")
                        .HasColumnType("integer")
                        .HasColumnName("weather_report_probability");

                    b.HasKey("Id")
                        .HasName("pk_incidents");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_incidents_city_id");

                    b.HasIndex("IncidentTypeId")
                        .HasDatabaseName("ix_incidents_incident_type_id");

                    b.HasIndex("OwnershipTypeId")
                        .HasDatabaseName("ix_incidents_ownership_type_id");

                    b.HasIndex("ProvinceId")
                        .HasDatabaseName("ix_incidents_province_id");

                    b.ToTable("incidents", "damage");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.IncidentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_incident_types");

                    b.ToTable("incident_types", "damage");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.InsurableObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("Other")
                        .HasColumnType("boolean")
                        .HasColumnName("other");

                    b.Property<int>("SamanId")
                        .HasColumnType("integer")
                        .HasColumnName("saman_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_insurable_objects");

                    b.ToTable("insurable_objects", "damage");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.OwnershipType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SamanId")
                        .HasColumnType("integer")
                        .HasColumnName("saman_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_ownership_types");

                    b.ToTable("ownership_types", "damage");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_provinces");

                    b.ToTable("provinces", "damage");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.StakeHolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("account_number");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("DamageClaimId")
                        .HasColumnType("uuid")
                        .HasColumnName("damage_claim_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("first_name");

                    b.Property<string>("Iban")
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("iban");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean")
                        .HasColumnName("is_owner");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_stake_holders");

                    b.HasIndex("DamageClaimId")
                        .HasDatabaseName("ix_stake_holders_damage_claim_id");

                    b.ToTable("stake_holders", "damage");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.StoredFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BucketName")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("bucket_name");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("DamageClaimId")
                        .HasColumnType("uuid")
                        .HasColumnName("damage_claim_id");

                    b.Property<int>("FileCategory")
                        .HasColumnType("integer")
                        .HasColumnName("file_category");

                    b.Property<Guid?>("IncidentId")
                        .HasColumnType("uuid")
                        .HasColumnName("incident_id");

                    b.Property<Guid?>("IncidentId1")
                        .HasColumnType("uuid")
                        .HasColumnName("incident_id1");

                    b.Property<Guid?>("IncidentId2")
                        .HasColumnType("uuid")
                        .HasColumnName("incident_id2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("size_in_bytes");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id")
                        .HasName("pk_stored_file");

                    b.HasIndex("DamageClaimId")
                        .HasDatabaseName("ix_stored_file_damage_claim_id");

                    b.HasIndex("IncidentId")
                        .HasDatabaseName("ix_stored_file_incident_id");

                    b.HasIndex("IncidentId1")
                        .HasDatabaseName("ix_stored_file_incident_id1");

                    b.HasIndex("IncidentId2")
                        .HasDatabaseName("ix_stored_file_incident_id2");

                    b.ToTable("stored_file", "damage");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.ThirdPartyCoverage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("company_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("policy_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_third_party_coverages");

                    b.ToTable("third_party_coverages", "damage");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.ThirdPartyCoveredObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("InsurableObjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("insurable_object_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("ThirdPartyCoverageId")
                        .HasColumnType("uuid")
                        .HasColumnName("third_party_coverage_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_third_party_covered_object");

                    b.HasIndex("InsurableObjectId")
                        .HasDatabaseName("ix_third_party_covered_object_insurable_object_id");

                    b.HasIndex("ThirdPartyCoverageId")
                        .HasDatabaseName("ix_third_party_covered_object_third_party_coverage_id");

                    b.ToTable("third_party_covered_object", "damage");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.City", b =>
                {
                    b.HasOne("FireInsurance.Damage.Domain.Entities.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cities_provinces_province_id");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.DamageClaim", b =>
                {
                    b.HasOne("FireInsurance.Damage.Domain.Entities.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId")
                        .HasConstraintName("fk_damage_claims_incidents_incident_id");

                    b.HasOne("FireInsurance.Damage.Domain.Entities.OwnershipType", "OwnershipType")
                        .WithMany()
                        .HasForeignKey("OwnershipTypeId")
                        .HasConstraintName("fk_damage_claims_ownership_types_ownership_type_id");

                    b.HasOne("FireInsurance.Damage.Domain.Entities.ThirdPartyCoverage", "ThirdPartyCoverage")
                        .WithMany()
                        .HasForeignKey("ThirdPartyCoverageId")
                        .HasConstraintName("fk_damage_claims_third_party_coverages_third_party_coverage_id");

                    b.OwnsOne("FireInsurance.Damage.Domain.Entities.Insurer", "Insurer", b1 =>
                        {
                            b1.Property<Guid>("DamageClaimId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("AccountNumber")
                                .IsRequired()
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("insurer_account_number");

                            b1.Property<DateOnly?>("DateOfBirth")
                                .HasColumnType("date")
                                .HasColumnName("insurer_date_of_birth");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("insurer_first_name");

                            b1.Property<string>("Iban")
                                .IsRequired()
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("insurer_iban");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("insurer_last_name");

                            b1.Property<string>("NationalID")
                                .IsRequired()
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("insurer_national_id");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("insurer_phone_number");

                            b1.HasKey("DamageClaimId");

                            b1.ToTable("damage_claims", "damage");

                            b1.WithOwner()
                                .HasForeignKey("DamageClaimId")
                                .HasConstraintName("fk_damage_claims_damage_claims_id");
                        });

                    b.Navigation("Incident");

                    b.Navigation("Insurer");

                    b.Navigation("OwnershipType");

                    b.Navigation("ThirdPartyCoverage");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.DamagedObject", b =>
                {
                    b.HasOne("FireInsurance.Damage.Domain.Entities.DamageClaim", "DamageClaim")
                        .WithMany("DamagedObjects")
                        .HasForeignKey("DamageClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_damaged_objects_damage_claims_damage_claim_id");

                    b.HasOne("FireInsurance.Damage.Domain.Entities.InsurableObject", "InsurableObject")
                        .WithMany()
                        .HasForeignKey("InsurableObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_damaged_objects_insurable_objects_insurable_object_id");

                    b.Navigation("DamageClaim");

                    b.Navigation("InsurableObject");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.Incident", b =>
                {
                    b.HasOne("FireInsurance.Damage.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_incidents_cities_city_id");

                    b.HasOne("FireInsurance.Damage.Domain.Entities.IncidentType", "IncidentType")
                        .WithMany()
                        .HasForeignKey("IncidentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_incidents_incident_types_incident_type_id");

                    b.HasOne("FireInsurance.Damage.Domain.Entities.OwnershipType", "OwnershipType")
                        .WithMany()
                        .HasForeignKey("OwnershipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_incidents_ownership_types_ownership_type_id");

                    b.HasOne("FireInsurance.Damage.Domain.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_incidents_provinces_province_id");

                    b.Navigation("City");

                    b.Navigation("IncidentType");

                    b.Navigation("OwnershipType");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.StakeHolder", b =>
                {
                    b.HasOne("FireInsurance.Damage.Domain.Entities.DamageClaim", null)
                        .WithMany("StakeHolders")
                        .HasForeignKey("DamageClaimId")
                        .HasConstraintName("fk_stake_holders_damage_claims_damage_claim_id");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.StoredFile", b =>
                {
                    b.HasOne("FireInsurance.Damage.Domain.Entities.DamageClaim", null)
                        .WithMany("InsuranceFiles")
                        .HasForeignKey("DamageClaimId")
                        .HasConstraintName("fk_stored_file_damage_claims_damage_claim_id");

                    b.HasOne("FireInsurance.Damage.Domain.Entities.Incident", null)
                        .WithMany("FireStationReportFiles")
                        .HasForeignKey("IncidentId")
                        .HasConstraintName("fk_stored_file_incidents_incident_id");

                    b.HasOne("FireInsurance.Damage.Domain.Entities.Incident", null)
                        .WithMany("IncidentImageFiles")
                        .HasForeignKey("IncidentId1")
                        .HasConstraintName("fk_stored_file_incidents_incident_id1");

                    b.HasOne("FireInsurance.Damage.Domain.Entities.Incident", null)
                        .WithMany("PoliceReportFiles")
                        .HasForeignKey("IncidentId2")
                        .HasConstraintName("fk_stored_file_incidents_incident_id2");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.ThirdPartyCoveredObject", b =>
                {
                    b.HasOne("FireInsurance.Damage.Domain.Entities.InsurableObject", "InsurableObject")
                        .WithMany()
                        .HasForeignKey("InsurableObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_third_party_covered_object_insurable_objects_insurable_obje");

                    b.HasOne("FireInsurance.Damage.Domain.Entities.ThirdPartyCoverage", "ThirdPartyCoverage")
                        .WithMany("ThirdPartyCoveredObjects")
                        .HasForeignKey("ThirdPartyCoverageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_third_party_covered_object_third_party_coverages_third_part");

                    b.Navigation("InsurableObject");

                    b.Navigation("ThirdPartyCoverage");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.DamageClaim", b =>
                {
                    b.Navigation("DamagedObjects");

                    b.Navigation("InsuranceFiles");

                    b.Navigation("StakeHolders");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.Incident", b =>
                {
                    b.Navigation("FireStationReportFiles");

                    b.Navigation("IncidentImageFiles");

                    b.Navigation("PoliceReportFiles");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("FireInsurance.Damage.Domain.Entities.ThirdPartyCoverage", b =>
                {
                    b.Navigation("ThirdPartyCoveredObjects");
                });
#pragma warning restore 612, 618
        }
    }
}
