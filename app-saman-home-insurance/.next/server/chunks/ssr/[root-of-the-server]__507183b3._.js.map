{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/matta/Desktop/Projects/saman-home-insurance/src/utils/auth.ts"],"sourcesContent":["// import { AuthService } from '@/swagger/services/AuthService';\r\nimport { cookies } from 'next/headers';\r\n\r\nexport const setAuthTokens = async (accessToken: string, refreshToken: string) => {\r\n  const cookieStore = await cookies();\r\n  cookieStore.set('authToken', accessToken, {\r\n    httpOnly: true,\r\n    secure: process.env.NODE_ENV === 'production',\r\n    sameSite: 'strict',\r\n    path: '/',\r\n  });\r\n  cookieStore.set('refreshToken', refreshToken, {\r\n    httpOnly: true,\r\n    secure: process.env.NODE_ENV === 'production',\r\n    sameSite: 'strict',\r\n    path: '/',\r\n  });\r\n};\r\n\r\nexport const getAuthToken = async () => {\r\n  const cookieStore = await cookies();\r\n  return cookieStore.get('authToken')?.value;\r\n};\r\n\r\nexport const getRefreshToken = async () => {\r\n  const cookieStore = await cookies();\r\n  return cookieStore.get('refreshToken')?.value;\r\n};\r\n\r\nexport const clearAuthTokens = async () => {\r\n  const cookieStore = await cookies();\r\n  cookieStore.delete('authToken');\r\n  cookieStore.delete('refreshToken');\r\n};\r\n\r\n// export const refreshAuthToken = async () => {\r\n//   const refreshToken = await getRefreshToken();\r\n//   if (!refreshToken) {\r\n//     throw new Error('No refresh token available');\r\n//   }\r\n\r\n//   try {\r\n//     const response = await AuthService.petInsurancePlatformUsersInfrastructureAuthenticationUserTokenService({\r\n//       requestBody: {\r\n//         refreshToken,\r\n//       },\r\n//     });\r\n\r\n//     if (response.accessToken && response.refreshToken) {\r\n//       await setAuthTokens(response.accessToken, response.refreshToken);\r\n//       return response.accessToken;\r\n//     }\r\n//     throw new Error('Invalid token response');\r\n//   } catch (error) {\r\n//     await clearAuthTokens();\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\nexport const isAuthenticated = async () => {\r\n  return !!(await getAuthToken());\r\n}; "],"names":[],"mappings":"AAAA,gEAAgE;;;;;;;;;;;;;AAChE;;AAEO,MAAM,gBAAgB,OAAO,aAAqB;IACvD,MAAM,cAAc,MAAM,IAAA,yQAAO;IACjC,YAAY,GAAG,CAAC,aAAa,aAAa;QACxC,UAAU;QACV,QAAQ,oDAAyB;QACjC,UAAU;QACV,MAAM;IACR;IACA,YAAY,GAAG,CAAC,gBAAgB,cAAc;QAC5C,UAAU;QACV,QAAQ,oDAAyB;QACjC,UAAU;QACV,MAAM;IACR;AACF;AAEO,MAAM,eAAe;IAC1B,MAAM,cAAc,MAAM,IAAA,yQAAO;IACjC,OAAO,YAAY,GAAG,CAAC,cAAc;AACvC;AAEO,MAAM,kBAAkB;IAC7B,MAAM,cAAc,MAAM,IAAA,yQAAO;IACjC,OAAO,YAAY,GAAG,CAAC,iBAAiB;AAC1C;AAEO,MAAM,kBAAkB;IAC7B,MAAM,cAAc,MAAM,IAAA,yQAAO;IACjC,YAAY,MAAM,CAAC;IACnB,YAAY,MAAM,CAAC;AACrB;AA0BO,MAAM,kBAAkB;IAC7B,OAAO,CAAC,CAAE,MAAM;AAClB","debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/matta/Desktop/Projects/saman-home-insurance/src/app/actions/auth.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport { UserAuthenticationOtpService } from \"@/swagger/services/UserAuthenticationOtpService\";\r\nimport { setAuthTokens } from \"@/utils/auth\";\r\nimport { revalidatePath } from \"next/cache\";\r\nimport {\r\n  handleApiErrorWithCleanup,\r\n  handleApiErrorWithDetails,\r\n} from \"@/lib/api-error-handler\";\r\nimport { OtpRequestDto } from \"@/swagger/models/OtpRequestDto\";\r\n\r\n// Check if user is registered or not\r\nexport async function checkRegistration(\r\n  phoneNumber: string\r\n  // recaptchaToken?: string\r\n) {\r\n  try {\r\n    // if (recaptchaToken) {\r\n    //   requestBody.captchaToken = recaptchaToken;\r\n    // }\r\n\r\n    const result = await UserAuthenticationOtpService.postApiV1UsersRequestOtp({\r\n      requestBody: {\r\n        phoneNumber: phoneNumber,\r\n      } as OtpRequestDto,\r\n    });\r\n    // API returns true if the user can register (i.e., phone number is available)\r\n    // and false if the user already exists\r\n    return {\r\n      success: true,\r\n      isRegistered: result === true,\r\n    };\r\n  } catch (error: any) {\r\n    console.error(\"Registration check error:\", error);\r\n    const errorDetails = handleApiErrorWithDetails(\r\n      error,\r\n      \"خطا در بررسی وضعیت کاربر. لطفا دوباره تلاش کنید.\"\r\n    );\r\n    return {\r\n      success: false,\r\n      error: errorDetails.message,\r\n      status: errorDetails.status,\r\n      details: errorDetails.body,\r\n    };\r\n  }\r\n}\r\n\r\n// Confirm phone number with OTP code\r\nexport async function confirmPhoneNumber(\r\n  phoneNumber: string,\r\n  code: number,\r\n  recaptchaToken?: string\r\n) {\r\n  // Maximum retry attempts\r\n  const maxRetries = 1;\r\n  let retryCount = 0;\r\n  let lastError: any = null;\r\n\r\n  // Retry logic\r\n  while (retryCount <= maxRetries) {\r\n    try {\r\n      console.log(\r\n        `Attempting to confirm phone ${phoneNumber} with code (attempt ${\r\n          retryCount + 1\r\n        }/${maxRetries + 1})`\r\n      );\r\n\r\n      const requestBody: any = {\r\n        phoneNumber,\r\n        otp: code.toString(), // Convert number to string and use 'otp' instead of 'code'\r\n      };\r\n\r\n      // Add captcha token if provided\r\n      if (recaptchaToken) {\r\n        requestBody.captchaToken = recaptchaToken;\r\n      }\r\n\r\n      await UserAuthenticationOtpService.postApiV1UsersVerifyOtp({\r\n        requestBody,\r\n      });\r\n\r\n      console.log(`Successfully confirmed phone ${phoneNumber}`);\r\n      return { success: true };\r\n    } catch (error: any) {\r\n      lastError = error;\r\n      console.error(\r\n        `Phone confirmation error (attempt ${retryCount + 1}):`,\r\n        error\r\n      );\r\n\r\n      // Check if it's a network error or server error (not invalid code)\r\n      if (error?.status >= 500) {\r\n        // Server error, try again after delay\r\n        retryCount++;\r\n        if (retryCount <= maxRetries) {\r\n          console.log(`Retrying confirmation in ${retryCount * 1000}ms...`);\r\n          // Wait longer between each retry\r\n          await new Promise((resolve) =>\r\n            setTimeout(resolve, retryCount * 1000)\r\n          );\r\n          continue;\r\n        }\r\n      } else {\r\n        // Client error or other error, don't retry\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // All retries failed or non-retryable error\r\n  const errorDetails = handleApiErrorWithDetails(\r\n    lastError,\r\n    lastError?.status === 400\r\n      ? \"کد تایید نامعتبر است. لطفا دوباره تلاش کنید.\"\r\n      : \"خطا در تایید شماره موبایل. لطفا دوباره تلاش کنید.\"\r\n  );\r\n  return {\r\n    success: false,\r\n    error: errorDetails.message,\r\n    status: errorDetails.status,\r\n    details: errorDetails.body,\r\n  };\r\n}\r\n\r\n\r\n// Login with OTP code\r\nexport async function loginWithCode(phoneNumber: string, code: number) {\r\n  try {\r\n    const response = await UserAuthenticationOtpService.postApiV1UsersVerifyOtp(\r\n      {\r\n        requestBody: {\r\n          phoneNumber,\r\n          otp: code.toString(), // Convert number to string and use 'otp' instead of 'code'\r\n        },\r\n      }\r\n    );\r\n\r\n    if (response.accessToken && response.refreshToken) {\r\n      await setAuthTokens(response.accessToken, response.refreshToken);\r\n      revalidatePath(\"/\");\r\n      return { success: true };\r\n    }\r\n    return {\r\n      success: false,\r\n      error: \"خطا در ورود. لطفا دوباره تلاش کنید.\",\r\n      details: response,\r\n    };\r\n  } catch (error: any) {\r\n    console.error(\"Login with code error:\", error);\r\n    const errorDetails = handleApiErrorWithDetails(\r\n      error,\r\n      \"کد تایید نامعتبر است. لطفا دوباره تلاش کنید.\"\r\n    );\r\n    return {\r\n      success: false,\r\n      error: errorDetails.message,\r\n      status: errorDetails.status,\r\n      details: errorDetails.body,\r\n    };\r\n  }\r\n}\r\n\r\nexport async function resendCode(phoneNumber: string) {\r\n  const maxRetries = 2;\r\n  let retryCount = 0;\r\n  let lastError: any = null;\r\n\r\n  while (retryCount <= maxRetries) {\r\n    try {\r\n      console.log(\r\n        `Attempting to send OTP code to ${phoneNumber} (attempt ${\r\n          retryCount + 1\r\n        }/${maxRetries + 1})`\r\n      );\r\n\r\n      // API now requires captcha token as a required parameter\r\n      await UserAuthenticationOtpService.postApiV1UsersRequestOtp({\r\n        requestBody: {\r\n          phoneNumber: phoneNumber,\r\n        },\r\n        // captchaToken: recaptchaToken,\r\n      });\r\n\r\n      console.log(`Successfully sent OTP code to ${phoneNumber}`);\r\n      return { success: true };\r\n    } catch (error: any) {\r\n      lastError = error;\r\n      console.error(`Resend code error (attempt ${retryCount + 1}):`, error);\r\n\r\n      if (error?.status === 422) {\r\n        const errorDetails = handleApiErrorWithDetails(\r\n          error,\r\n          \"کد قبلا فرستاده شده\"\r\n        );\r\n        return {\r\n          success: false,\r\n          error: errorDetails.message,\r\n          status: errorDetails.status,\r\n          details: {\r\n            type: errorDetails.type,\r\n            title: errorDetails.title,\r\n            status: errorDetails.status,\r\n            detail: errorDetails.detail,\r\n            message: errorDetails.detail,\r\n          },\r\n        };\r\n      }\r\n\r\n      if (error?.status === 429 || error?.status >= 500) {\r\n        retryCount++;\r\n        if (retryCount <= maxRetries) {\r\n          console.log(`Retrying in ${retryCount * 1000}ms...`);\r\n          await new Promise((resolve) =>\r\n            setTimeout(resolve, retryCount * 1000)\r\n          );\r\n          continue;\r\n        }\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  const errorDetails = handleApiErrorWithDetails(\r\n    lastError,\r\n    \"خطا در ارسال کد تایید. لطفا دوباره تلاش کنید.\"\r\n  );\r\n  return {\r\n    success: false,\r\n    error: errorDetails.message,\r\n    status: errorDetails.status,\r\n    details: {\r\n      type: errorDetails.type,\r\n      title: errorDetails.title,\r\n      status: errorDetails.status,\r\n      detail: errorDetails.detail,\r\n      message: errorDetails.detail,\r\n    },\r\n  };\r\n}"],"names":[],"mappings":";;;;;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;AAOO,eAAe,kBACpB,WAAmB;IAGnB,IAAI;QACF,wBAAwB;QACxB,+CAA+C;QAC/C,IAAI;QAEJ,MAAM,SAAS,MAAM,0LAA4B,CAAC,wBAAwB,CAAC;YACzE,aAAa;gBACX,aAAa;YACf;QACF;QACA,8EAA8E;QAC9E,uCAAuC;QACvC,OAAO;YACL,SAAS;YACT,cAAc,WAAW;QAC3B;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,eAAe,IAAA,kKAAyB,EAC5C,OACA;QAEF,OAAO;YACL,SAAS;YACT,OAAO,aAAa,OAAO;YAC3B,QAAQ,aAAa,MAAM;YAC3B,SAAS,aAAa,IAAI;QAC5B;IACF;AACF;AAGO,eAAe,mBACpB,WAAmB,EACnB,IAAY,EACZ,cAAuB;IAEvB,yBAAyB;IACzB,MAAM,aAAa;IACnB,IAAI,aAAa;IACjB,IAAI,YAAiB;IAErB,cAAc;IACd,MAAO,cAAc,WAAY;QAC/B,IAAI;YACF,QAAQ,GAAG,CACT,CAAC,4BAA4B,EAAE,YAAY,oBAAoB,EAC7D,aAAa,EACd,CAAC,EAAE,aAAa,EAAE,CAAC,CAAC;YAGvB,MAAM,cAAmB;gBACvB;gBACA,KAAK,KAAK,QAAQ;YACpB;YAEA,gCAAgC;YAChC,IAAI,gBAAgB;gBAClB,YAAY,YAAY,GAAG;YAC7B;YAEA,MAAM,0LAA4B,CAAC,uBAAuB,CAAC;gBACzD;YACF;YAEA,QAAQ,GAAG,CAAC,CAAC,6BAA6B,EAAE,aAAa;YACzD,OAAO;gBAAE,SAAS;YAAK;QACzB,EAAE,OAAO,OAAY;YACnB,YAAY;YACZ,QAAQ,KAAK,CACX,CAAC,kCAAkC,EAAE,aAAa,EAAE,EAAE,CAAC,EACvD;YAGF,mEAAmE;YACnE,IAAI,OAAO,UAAU,KAAK;gBACxB,sCAAsC;gBACtC;gBACA,IAAI,cAAc,YAAY;oBAC5B,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,aAAa,KAAK,KAAK,CAAC;oBAChE,iCAAiC;oBACjC,MAAM,IAAI,QAAQ,CAAC,UACjB,WAAW,SAAS,aAAa;oBAEnC;gBACF;YACF,OAAO;gBAEL;YACF;QACF;IACF;IAEA,4CAA4C;IAC5C,MAAM,eAAe,IAAA,kKAAyB,EAC5C,WACA,WAAW,WAAW,MAClB,iDACA;IAEN,OAAO;QACL,SAAS;QACT,OAAO,aAAa,OAAO;QAC3B,QAAQ,aAAa,MAAM;QAC3B,SAAS,aAAa,IAAI;IAC5B;AACF;AAIO,eAAe,cAAc,WAAmB,EAAE,IAAY;IACnE,IAAI;QACF,MAAM,WAAW,MAAM,0LAA4B,CAAC,uBAAuB,CACzE;YACE,aAAa;gBACX;gBACA,KAAK,KAAK,QAAQ;YACpB;QACF;QAGF,IAAI,SAAS,WAAW,IAAI,SAAS,YAAY,EAAE;YACjD,MAAM,IAAA,qIAAa,EAAC,SAAS,WAAW,EAAE,SAAS,YAAY;YAC/D,IAAA,8QAAc,EAAC;YACf,OAAO;gBAAE,SAAS;YAAK;QACzB;QACA,OAAO;YACL,SAAS;YACT,OAAO;YACP,SAAS;QACX;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,0BAA0B;QACxC,MAAM,eAAe,IAAA,kKAAyB,EAC5C,OACA;QAEF,OAAO;YACL,SAAS;YACT,OAAO,aAAa,OAAO;YAC3B,QAAQ,aAAa,MAAM;YAC3B,SAAS,aAAa,IAAI;QAC5B;IACF;AACF;AAEO,eAAe,WAAW,WAAmB;IAClD,MAAM,aAAa;IACnB,IAAI,aAAa;IACjB,IAAI,YAAiB;IAErB,MAAO,cAAc,WAAY;QAC/B,IAAI;YACF,QAAQ,GAAG,CACT,CAAC,+BAA+B,EAAE,YAAY,UAAU,EACtD,aAAa,EACd,CAAC,EAAE,aAAa,EAAE,CAAC,CAAC;YAGvB,yDAAyD;YACzD,MAAM,0LAA4B,CAAC,wBAAwB,CAAC;gBAC1D,aAAa;oBACX,aAAa;gBACf;YAEF;YAEA,QAAQ,GAAG,CAAC,CAAC,8BAA8B,EAAE,aAAa;YAC1D,OAAO;gBAAE,SAAS;YAAK;QACzB,EAAE,OAAO,OAAY;YACnB,YAAY;YACZ,QAAQ,KAAK,CAAC,CAAC,2BAA2B,EAAE,aAAa,EAAE,EAAE,CAAC,EAAE;YAEhE,IAAI,OAAO,WAAW,KAAK;gBACzB,MAAM,eAAe,IAAA,kKAAyB,EAC5C,OACA;gBAEF,OAAO;oBACL,SAAS;oBACT,OAAO,aAAa,OAAO;oBAC3B,QAAQ,aAAa,MAAM;oBAC3B,SAAS;wBACP,MAAM,aAAa,IAAI;wBACvB,OAAO,aAAa,KAAK;wBACzB,QAAQ,aAAa,MAAM;wBAC3B,QAAQ,aAAa,MAAM;wBAC3B,SAAS,aAAa,MAAM;oBAC9B;gBACF;YACF;YAEA,IAAI,OAAO,WAAW,OAAO,OAAO,UAAU,KAAK;gBACjD;gBACA,IAAI,cAAc,YAAY;oBAC5B,QAAQ,GAAG,CAAC,CAAC,YAAY,EAAE,aAAa,KAAK,KAAK,CAAC;oBACnD,MAAM,IAAI,QAAQ,CAAC,UACjB,WAAW,SAAS,aAAa;oBAEnC;gBACF;YACF,OAAO;gBACL;YACF;QACF;IACF;IAEA,MAAM,eAAe,IAAA,kKAAyB,EAC5C,WACA;IAEF,OAAO;QACL,SAAS;QACT,OAAO,aAAa,OAAO;QAC3B,QAAQ,aAAa,MAAM;QAC3B,SAAS;YACP,MAAM,aAAa,IAAI;YACvB,OAAO,aAAa,KAAK;YACzB,QAAQ,aAAa,MAAM;YAC3B,QAAQ,aAAa,MAAM;YAC3B,SAAS,aAAa,MAAM;QAC9B;IACF;AACF;;;IAnOsB;IAoCA;IA8EA;IAoCA;;AAtJA,8WAAA;AAoCA,8WAAA;AA8EA,8WAAA;AAoCA,8WAAA","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/matta/Desktop/Projects/saman-home-insurance/.next-internal/server/app/%28auth%29/login/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {resendCode as '40e942b44d821644d8e483022613ff3d4407131d2f'} from 'ACTIONS_MODULE0'\nexport {checkRegistration as '4075ac5d6c663f8da0e777b782a227a562850e9713'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/matta/Desktop/Projects/saman-home-insurance/src/app/%28auth%29/login/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(auth)/login/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(auth)/login/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,uYAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/matta/Desktop/Projects/saman-home-insurance/src/app/%28auth%29/login/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(auth)/login/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(auth)/login/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,uYAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA6Q,GAC1S,2CACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 324, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}