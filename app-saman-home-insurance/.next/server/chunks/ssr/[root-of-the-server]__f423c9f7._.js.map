{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/matta/Desktop/Projects/saman-home-insurance/src/utils/auth.ts"],"sourcesContent":["import { AuthService } from '@/swagger/services/AuthService';\r\nimport { cookies } from 'next/headers';\r\n\r\nexport const setAuthTokens = async (accessToken: string, refreshToken: string) => {\r\n  const cookieStore = await cookies();\r\n  cookieStore.set('authToken', accessToken, {\r\n    httpOnly: true,\r\n    secure: process.env.NODE_ENV === 'production',\r\n    sameSite: 'strict',\r\n    path: '/',\r\n  });\r\n  cookieStore.set('refreshToken', refreshToken, {\r\n    httpOnly: true,\r\n    secure: process.env.NODE_ENV === 'production',\r\n    sameSite: 'strict',\r\n    path: '/',\r\n  });\r\n};\r\n\r\nexport const getAuthToken = async () => {\r\n  const cookieStore = await cookies();\r\n  return cookieStore.get('authToken')?.value;\r\n};\r\n\r\nexport const getRefreshToken = async () => {\r\n  const cookieStore = await cookies();\r\n  return cookieStore.get('refreshToken')?.value;\r\n};\r\n\r\nexport const clearAuthTokens = async () => {\r\n  const cookieStore = await cookies();\r\n  cookieStore.delete('authToken');\r\n  cookieStore.delete('refreshToken');\r\n};\r\n\r\nexport const refreshAuthToken = async () => {\r\n  const refreshToken = await getRefreshToken();\r\n  if (!refreshToken) {\r\n    throw new Error('No refresh token available');\r\n  }\r\n\r\n  try {\r\n    const response = await AuthService.petInsurancePlatformUsersInfrastructureAuthenticationUserTokenService({\r\n      requestBody: {\r\n        refreshToken,\r\n      },\r\n    });\r\n\r\n    if (response.accessToken && response.refreshToken) {\r\n      await setAuthTokens(response.accessToken, response.refreshToken);\r\n      return response.accessToken;\r\n    }\r\n    throw new Error('Invalid token response');\r\n  } catch (error) {\r\n    await clearAuthTokens();\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const isAuthenticated = async () => {\r\n  return !!(await getAuthToken());\r\n}; "],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA;;;AAEO,MAAM,gBAAgB,OAAO,aAAqB;IACvD,MAAM,cAAc,MAAM,IAAA,yQAAO;IACjC,YAAY,GAAG,CAAC,aAAa,aAAa;QACxC,UAAU;QACV,QAAQ,oDAAyB;QACjC,UAAU;QACV,MAAM;IACR;IACA,YAAY,GAAG,CAAC,gBAAgB,cAAc;QAC5C,UAAU;QACV,QAAQ,oDAAyB;QACjC,UAAU;QACV,MAAM;IACR;AACF;AAEO,MAAM,eAAe;IAC1B,MAAM,cAAc,MAAM,IAAA,yQAAO;IACjC,OAAO,YAAY,GAAG,CAAC,cAAc;AACvC;AAEO,MAAM,kBAAkB;IAC7B,MAAM,cAAc,MAAM,IAAA,yQAAO;IACjC,OAAO,YAAY,GAAG,CAAC,iBAAiB;AAC1C;AAEO,MAAM,kBAAkB;IAC7B,MAAM,cAAc,MAAM,IAAA,yQAAO;IACjC,YAAY,MAAM,CAAC;IACnB,YAAY,MAAM,CAAC;AACrB;AAEO,MAAM,mBAAmB;IAC9B,MAAM,eAAe,MAAM;IAC3B,IAAI,CAAC,cAAc;QACjB,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,YAAY,qEAAqE,CAAC;YACvG,aAAa;gBACX;YACF;QACF;QAEA,IAAI,SAAS,WAAW,IAAI,SAAS,YAAY,EAAE;YACjD,MAAM,cAAc,SAAS,WAAW,EAAE,SAAS,YAAY;YAC/D,OAAO,SAAS,WAAW;QAC7B;QACA,MAAM,IAAI,MAAM;IAClB,EAAE,OAAO,OAAO;QACd,MAAM;QACN,MAAM;IACR;AACF;AAEO,MAAM,kBAAkB;IAC7B,OAAO,CAAC,CAAE,MAAM;AAClB","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/matta/Desktop/Projects/saman-home-insurance/src/lib/api-error-handler.ts"],"sourcesContent":["/**\r\n * Comprehensive API error handler utility\r\n * Handles various error structures including arrays, Ardalis Result patterns, and different API response formats\r\n */\r\n\r\n// Helper function to safely get error message from various structures\r\nconst extractErrorMessage = (obj: any): string | null => {\r\n  if (!obj) return null;\r\n  \r\n  // Check if obj is an array, process each item\r\n  if (Array.isArray(obj)) {\r\n    const errorMessages: string[] = [];\r\n    \r\n    for (const item of obj) {\r\n      if (item && typeof item === 'object') {\r\n        // Check for errorMessage property (our target)\r\n        if (typeof item.errorMessage === 'string' && item.errorMessage.trim()) {\r\n          errorMessages.push(item.errorMessage);\r\n        }\r\n        // Check for other properties if errorMessage is not found\r\n        else if (typeof item.detail === 'string' && item.detail.trim()) {\r\n          errorMessages.push(item.detail);\r\n        }\r\n        else if (typeof item.message === 'string' && item.message.trim()) {\r\n          errorMessages.push(item.message);\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (errorMessages.length > 0) {\r\n      return errorMessages.join('\\n');\r\n    }\r\n  }\r\n  \r\n  // Normalize common casing differences (FastEndpoints often uses capital keys)\r\n  const errorsKey = (obj.errors ?? obj.Errors) as any;\r\n  const messageKey = obj.message ?? obj.Message;\r\n  const detailKey = obj.detail ?? obj.Detail;\r\n  const titleKey = obj.title ?? obj.Title;\r\n  const statusKey = obj.status ?? obj.Status ?? obj.statusCode ?? obj.StatusCode;\r\n\r\n  // Check for Ardalis/FastEndpoints Result pattern - errors array (objects or strings)\r\n  if (errorsKey && Array.isArray(errorsKey)) {\r\n    const errorMessages: string[] = [];\r\n    \r\n    for (const error of errorsKey) {\r\n      if (error && typeof error === 'object') {\r\n        // Check for errorMessage property (our target)\r\n        if (typeof error.errorMessage === 'string' && error.errorMessage.trim()) {\r\n          errorMessages.push(error.errorMessage);\r\n        }\r\n        // Check for other properties if errorMessage is not found\r\n        else if (typeof error.detail === 'string' && error.detail.trim()) {\r\n          errorMessages.push(error.detail);\r\n        }\r\n        else if (typeof error.message === 'string' && error.message.trim()) {\r\n          errorMessages.push(error.message);\r\n        }\r\n        // Check for value property (common in Ardalis Result)\r\n        else if (typeof error.value === 'string' && error.value.trim()) {\r\n          errorMessages.push(error.value);\r\n        }\r\n        // Check for code/description tuple (common in FastEndpoints validation)\r\n        else if (typeof (error.description ?? error.Description) === 'string') {\r\n          errorMessages.push(String(error.description ?? error.Description));\r\n        }\r\n      } else if (typeof error === 'string' && error.trim()) {\r\n        // Ardalis sometimes returns array of strings\r\n        errorMessages.push(error);\r\n      }\r\n    }\r\n    \r\n    if (errorMessages.length > 0) {\r\n      return errorMessages.join('\\n');\r\n    }\r\n  }\r\n  \r\n  // Check for Ardalis Result pattern - isSuccess = false with single error\r\n  if (obj.isSuccess === false) {\r\n    // Check for single error object\r\n    if (obj.error && typeof obj.error === 'object') {\r\n      const errorMsg = extractErrorMessage(obj.error);\r\n      if (errorMsg) return errorMsg;\r\n    }\r\n    \r\n    // Check for error message directly\r\n    if (typeof obj.errorMessage === 'string' && obj.errorMessage.trim()) {\r\n      return obj.errorMessage;\r\n    }\r\n    \r\n    // Check for value property (common in failed Ardalis Results)\r\n    if (typeof obj.value === 'string' && obj.value.trim()) {\r\n      return obj.value;\r\n    }\r\n  }\r\n  \r\n  // Check for errorMessage property (our target)\r\n  if (typeof obj.errorMessage === 'string' && obj.errorMessage.trim()) {\r\n    return obj.errorMessage;\r\n  }\r\n  \r\n  // Check for validation errors object (lower/upper-case keys)\r\n  if (errorsKey && typeof errorsKey === 'object' && !Array.isArray(errorsKey)) {\r\n    const validationErrors = Object.values(errorsKey).flat().join(\"\\n\");\r\n    if (validationErrors.trim()) {\r\n      return `خطاهای اعتبارسنجی:\\n${validationErrors}`;\r\n    }\r\n  }\r\n  \r\n  // ProblemDetails style\r\n  if (typeof detailKey === 'string' && detailKey.trim()) {\r\n    return detailKey;\r\n  }\r\n  \r\n  // Message style\r\n  if (typeof messageKey === 'string' && messageKey.trim()) {\r\n    return messageKey;\r\n  }\r\n\r\n  // Combine title + status\r\n  if (titleKey && statusKey) {\r\n    return `${titleKey} (${statusKey})`;\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\n/**\r\n * Main API error handler function\r\n * @param error - The error object from API calls\r\n * @param defaultMessage - Default message to show if no specific error is found\r\n * @returns Formatted error message string with preserved status codes\r\n */\r\nexport const handleApiError = (error: any, defaultMessage: string = \"خطایی رخ داد. لطفا دوباره تلاش کنید.\"): string => {\r\n  console.log(\"Handling API error:\", error);\r\n  \r\n  // Preserve specific error codes like 429 (Too Many Requests)\r\n  if (error?.status === 429) {\r\n    return \"درخواست‌های زیادی ارسال شده است. لطفا کمی صبر کنید و دوباره تلاش کنید.\";\r\n  }\r\n  \r\n  // 1. Check ApiError body (swagger-generated errors)\r\n  if (error?.body) {\r\n    const message = extractErrorMessage(error.body);\r\n    if (message) {\r\n      console.log(\"Found error in error.body:\", message);\r\n      return message;\r\n    }\r\n  }\r\n  \r\n  // 2. Check if error itself has the properties\r\n  const directMessage = extractErrorMessage(error);\r\n  if (directMessage) {\r\n    console.log(\"Found error in error object:\", directMessage);\r\n    return directMessage;\r\n  }\r\n  \r\n  // 3. Check response.body structure\r\n  if (error?.response?.body) {\r\n    const message = extractErrorMessage(error.response.body);\r\n    if (message) {\r\n      console.log(\"Found error in error.response.body:\", message);\r\n      return message;\r\n    }\r\n  }\r\n  \r\n  // 4. Check if body is a string and try to parse it\r\n  if (typeof error?.body === 'string') {\r\n    try {\r\n      const parsed = JSON.parse(error.body);\r\n      const message = extractErrorMessage(parsed);\r\n      if (message) {\r\n        console.log(\"Found error in parsed body:\", message);\r\n        return message;\r\n      }\r\n    } catch (e) {\r\n      console.log(\"Failed to parse error body as JSON\");\r\n    }\r\n  }\r\n  \r\n  // 5. Check if response.body is a string and try to parse it\r\n  if (typeof error?.response?.body === 'string') {\r\n    try {\r\n      const parsed = JSON.parse(error.response.body);\r\n      const message = extractErrorMessage(parsed);\r\n      if (message) {\r\n        console.log(\"Found error in parsed response.body:\", message);\r\n        return message;\r\n      }\r\n    } catch (e) {\r\n      console.log(\"Failed to parse response.body as JSON\");\r\n    }\r\n  }\r\n  \r\n  // 6. Fallback to error.message if it's not generic\r\n  if (error?.message && \r\n      error.message !== 'Bad Request' && \r\n      error.message !== 'Network Error' &&\r\n      error.message !== 'Unauthorized' &&\r\n      error.message !== 'Forbidden' &&\r\n      error.message.trim()) {\r\n    console.log(\"Using error.message as fallback:\", error.message);\r\n    return error.message;\r\n  }\r\n  \r\n  // 7. Last resort - return default message\r\n  console.log(\"No meaningful error message found, using default\");\r\n  return defaultMessage;\r\n};\r\n\r\n/**\r\n * Clean error message by removing common prefixes\r\n * @param errorMessage - Raw error message\r\n * @returns Cleaned error message\r\n */\r\nexport const cleanErrorMessage = (errorMessage: string): string => {\r\n  return errorMessage\r\n    .replace(\"Next error(s) occurred:*\", \"\")\r\n    .replace(\"Next error(s) occurred:\", \"\")\r\n    .trim();\r\n};\r\n\r\n/**\r\n * Handle API error with automatic cleaning\r\n * @param error - The error object from API calls\r\n * @param defaultMessage - Default message to show if no specific error is found\r\n * @returns Cleaned and formatted error message string\r\n */\r\nexport const handleApiErrorWithCleanup = (error: any, defaultMessage: string = \"خطایی رخ داد. لطفا دوباره تلاش کنید.\"): string => {\r\n  const message = handleApiError(error, defaultMessage);\r\n  return cleanErrorMessage(message);\r\n};\r\n\r\n/**\r\n * Handle API error and return detailed error information including status codes\r\n * @param error - The error object from API calls\r\n * @param defaultMessage - Default message to show if no specific error is found\r\n * @returns Object containing message, status code, and other error details\r\n */\r\nexport const handleApiErrorWithDetails = (error: any, defaultMessage: string = \"خطایی رخ داد. لطفا دوباره تلاش کنید.\") => {\r\n  const message = handleApiErrorWithCleanup(error, defaultMessage);\r\n  \r\n  return {\r\n    message,\r\n    status: error?.status || error?.response?.status || null,\r\n    code: error?.code || error?.response?.code || null,\r\n    type: error?.body?.type || error?.response?.body?.type || null,\r\n    title: error?.body?.title || error?.response?.body?.title || null,\r\n    detail: error?.body?.detail || error?.response?.body?.detail || null,\r\n    body: error?.body || error?.response?.body || null,\r\n  };\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/matta/Desktop/Projects/saman-home-insurance/src/app/actions/auth.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport { AuthService } from \"@/swagger/services/AuthService\";\r\nimport { setAuthTokens } from \"@/utils/auth\";\r\nimport { revalidatePath } from \"next/cache\";\r\nimport { handleApiErrorWithCleanup, handleApiErrorWithDetails } from \"@/lib/api-error-handler\";\r\n\r\n// Check if user is registered or not\r\nexport async function checkRegistration(\r\n  phoneNumber: string,\r\n  recaptchaToken?: string\r\n) {\r\n  try {\r\n    const requestBody: any = { phoneNumber };\r\n    if (recaptchaToken) {\r\n      requestBody.captchaToken = recaptchaToken;\r\n    }\r\n\r\n    const result =\r\n      await AuthService.petInsurancePlatformUsersEndpointsAuthRegisterEndpoint({\r\n        requestBody,\r\n      });\r\n    // API returns true if the user can register (i.e., phone number is available)\r\n    // and false if the user already exists\r\n    return {\r\n      success: true,\r\n      isRegistered: result === true,\r\n    };\r\n  } catch (error: any) {\r\n    console.error(\"Registration check error:\", error);\r\n    const errorDetails = handleApiErrorWithDetails(error, \"خطا در بررسی وضعیت کاربر. لطفا دوباره تلاش کنید.\");\r\n    return {\r\n      success: false,\r\n      error: errorDetails.message,\r\n      status: errorDetails.status,\r\n      details: errorDetails.body,\r\n    };\r\n  }\r\n}\r\n\r\n// Confirm phone number with OTP code\r\nexport async function confirmPhoneNumber(phoneNumber: string, code: number, recaptchaToken?: string) {\r\n  // Maximum retry attempts\r\n  const maxRetries = 1;\r\n  let retryCount = 0;\r\n  let lastError: any = null;\r\n\r\n  // Retry logic\r\n  while (retryCount <= maxRetries) {\r\n    try {\r\n      console.log(\r\n        `Attempting to confirm phone ${phoneNumber} with code (attempt ${\r\n          retryCount + 1\r\n        }/${maxRetries + 1})`\r\n      );\r\n\r\n      const requestBody: any = {\r\n        phoneNumber,\r\n        code,\r\n      };\r\n\r\n      // Add captcha token if provided\r\n      if (recaptchaToken) {\r\n        requestBody.captchaToken = recaptchaToken;\r\n      }\r\n\r\n      await AuthService.petInsurancePlatformUsersEndpointsAuthConfirmPhoneNumberEndpoint(\r\n        {\r\n          requestBody,\r\n        }\r\n      );\r\n\r\n      console.log(`Successfully confirmed phone ${phoneNumber}`);\r\n      return { success: true };\r\n    } catch (error: any) {\r\n      lastError = error;\r\n      console.error(\r\n        `Phone confirmation error (attempt ${retryCount + 1}):`,\r\n        error\r\n      );\r\n\r\n      // Check if it's a network error or server error (not invalid code)\r\n      if (error?.status >= 500) {\r\n        // Server error, try again after delay\r\n        retryCount++;\r\n        if (retryCount <= maxRetries) {\r\n          console.log(`Retrying confirmation in ${retryCount * 1000}ms...`);\r\n          // Wait longer between each retry\r\n          await new Promise((resolve) =>\r\n            setTimeout(resolve, retryCount * 1000)\r\n          );\r\n          continue;\r\n        }\r\n      } else {\r\n        // Client error or other error, don't retry\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // All retries failed or non-retryable error\r\n  const errorDetails = handleApiErrorWithDetails(\r\n    lastError,\r\n    lastError?.status === 400\r\n      ? \"کد تایید نامعتبر است. لطفا دوباره تلاش کنید.\"\r\n      : \"خطا در تایید شماره موبایل. لطفا دوباره تلاش کنید.\"\r\n  );\r\n  return {\r\n    success: false,\r\n    error: errorDetails.message,\r\n    status: errorDetails.status,\r\n    details: errorDetails.body,\r\n  };\r\n}\r\n\r\n// Set user profile during registration\r\nexport async function setUserProfile(\r\n  phoneNumber: string,\r\n  firstName: string,\r\n  lastName: string,\r\n  password: string,\r\n  rePassword: string\r\n) {\r\n  try {\r\n    await AuthService.petInsurancePlatformUsersEndpointsAuthSetProfileEndpoint({\r\n      requestBody: {\r\n        phoneNumber,\r\n        firstName,\r\n        lastName,\r\n        password,\r\n        rePassword,\r\n      },\r\n    });\r\n    return { success: true };\r\n  } catch (error: any) {\r\n    console.error(\"Set profile error:\", error);\r\n    const errorDetails = handleApiErrorWithDetails(error, \"خطا در ثبت اطلاعات کاربری. لطفا دوباره تلاش کنید.\");\r\n    return {\r\n      success: false,\r\n      error: errorDetails.message,\r\n      status: errorDetails.status,\r\n      details: errorDetails.body,\r\n    };\r\n  }\r\n}\r\n\r\n// Login with password\r\nexport async function loginWithPassword(phoneNumber: string, password: string) {\r\n  try {\r\n    const response =\r\n      await AuthService.petInsurancePlatformUsersEndpointsAuthLoginByPasswordEndpoint(\r\n        {\r\n          requestBody: {\r\n            phoneNumber,\r\n            password,\r\n          },\r\n        }\r\n      );\r\n\r\n    if (response.accessToken && response.refreshToken) {\r\n      await setAuthTokens(response.accessToken, response.refreshToken);\r\n      revalidatePath(\"/\");\r\n      return { success: true };\r\n    }\r\n    return {\r\n      success: false,\r\n      error: \"خطا در ورود. لطفا دوباره تلاش کنید.\",\r\n      details: response,\r\n    };\r\n  } catch (error: any) {\r\n    console.error(\"Login with password error:\", error);\r\n    const errorDetails = handleApiErrorWithDetails(error, \"اطلاعات ورود نامعتبر است. لطفا دوباره تلاش کنید.\");\r\n    return {\r\n      success: false,\r\n      error: errorDetails.message,\r\n      status: errorDetails.status,\r\n      details: errorDetails.body,\r\n    };\r\n  }\r\n}\r\n\r\n// Login with OTP code\r\nexport async function loginWithCode(phoneNumber: string, code: number) {\r\n  try {\r\n    const response =\r\n      await AuthService.petInsurancePlatformUsersEndpointsAuthLoginByCodeEndpoint(\r\n        {\r\n          requestBody: {\r\n            phoneNumber,\r\n            code,\r\n          },\r\n        }\r\n      );\r\n\r\n    if (response.accessToken && response.refreshToken) {\r\n      await setAuthTokens(response.accessToken, response.refreshToken);\r\n      revalidatePath(\"/\");\r\n      return { success: true };\r\n    }\r\n    return {\r\n      success: false,\r\n      error: \"خطا در ورود. لطفا دوباره تلاش کنید.\",\r\n      details: response,\r\n    };\r\n  } catch (error: any) {\r\n    console.error(\"Login with code error:\", error);\r\n    const errorDetails = handleApiErrorWithDetails(error, \"کد تایید نامعتبر است. لطفا دوباره تلاش کنید.\");\r\n    return {\r\n      success: false,\r\n      error: errorDetails.message,\r\n      status: errorDetails.status,\r\n      details: errorDetails.body,\r\n    };\r\n  }\r\n}\r\n\r\nexport async function resendCode(phoneNumber: string, recaptchaToken: string) {\r\n  const maxRetries = 2;\r\n  let retryCount = 0;\r\n  let lastError: any = null;\r\n\r\n  while (retryCount <= maxRetries) {\r\n    try {\r\n      console.log(\r\n        `Attempting to send OTP code to ${phoneNumber} (attempt ${\r\n          retryCount + 1\r\n        }/${maxRetries + 1})`\r\n      );\r\n\r\n      // API now requires captcha token as a required parameter\r\n      await AuthService.petInsurancePlatformUsersEndpointsAuthResendCodeEndpoint(\r\n        {\r\n          phoneNumber,\r\n          captchaToken: recaptchaToken,\r\n        }\r\n      );\r\n\r\n      console.log(`Successfully sent OTP code to ${phoneNumber}`);\r\n      return { success: true };\r\n    } catch (error: any) {\r\n      lastError = error;\r\n      console.error(`Resend code error (attempt ${retryCount + 1}):`, error);\r\n\r\n      if (error?.status === 422) {\r\n        const errorDetails = handleApiErrorWithDetails(error, \"کد قبلا فرستاده شده\");\r\n        return {\r\n          success: false,\r\n          error: errorDetails.message,\r\n          status: errorDetails.status,\r\n          details: {\r\n            type: errorDetails.type,\r\n            title: errorDetails.title,\r\n            status: errorDetails.status,\r\n            detail: errorDetails.detail,\r\n            message: errorDetails.detail,\r\n          },\r\n        };\r\n      }\r\n\r\n      if (error?.status === 429 || error?.status >= 500) {\r\n        retryCount++;\r\n        if (retryCount <= maxRetries) {\r\n          console.log(`Retrying in ${retryCount * 1000}ms...`);\r\n          await new Promise((resolve) =>\r\n            setTimeout(resolve, retryCount * 1000)\r\n          );\r\n          continue;\r\n        }\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  const errorDetails = handleApiErrorWithDetails(lastError, \"خطا در ارسال کد تایید. لطفا دوباره تلاش کنید.\");\r\n  return {\r\n    success: false,\r\n    error: errorDetails.message,\r\n    status: errorDetails.status,\r\n    details: {\r\n      type: errorDetails.type,\r\n      title: errorDetails.title,\r\n      status: errorDetails.status,\r\n      detail: errorDetails.detail,\r\n      message: errorDetails.detail,\r\n    },\r\n  };\r\n}\r\n\r\n// Request forgot password OTP\r\nexport async function requestForgotPassword(\r\n  phoneNumber: string,\r\n  recaptchaToken?: string\r\n) {\r\n  try {\r\n    const requestBody: any = { phoneNumber };\r\n    if (recaptchaToken) {\r\n      requestBody.captchaToken = recaptchaToken;\r\n    }\r\n\r\n    await AuthService.petInsurancePlatformUsersEndpointsAuthForgetPasswordRequestEndpoint(\r\n      {\r\n        requestBody,\r\n      }\r\n    );\r\n    return { success: true };\r\n  } catch (error: any) {\r\n    console.error(\"Forgot password request error:\", error.body?.detail);\r\n    const errorDetails = handleApiErrorWithDetails(error, \"خطا در ارسال کد تایید. لطفا دوباره تلاش کنید.\");\r\n    return {\r\n      success: false,\r\n      error: errorDetails.message,\r\n      status: errorDetails.status,\r\n      details: errorDetails.body,\r\n    };\r\n  }\r\n}\r\n\r\n// Verify forgot password OTP\r\nexport async function verifyForgotPassword(phoneNumber: string, code: number, captchaToken: string) { \r\n  try {\r\n    const response =\r\n      await AuthService.petInsurancePlatformUsersEndpointsAuthForgetPasswordVerifyEndpoint(\r\n        {\r\n          requestBody: {\r\n            phoneNumber,\r\n            code,\r\n            captchaToken\r\n          },\r\n        }\r\n      );\r\n    return {\r\n      success: true,\r\n      resetToken: response.resetToken,\r\n    };\r\n  } catch (error: any) {\r\n    console.error(\"Forgot password verification error:\", error);\r\n    const errorDetails = handleApiErrorWithDetails(error, \"کد تایید نامعتبر است. لطفا دوباره تلاش کنید.\");\r\n    return {\r\n      success: false,\r\n      error: errorDetails.message,\r\n      status: errorDetails.status,\r\n      details: errorDetails.body,\r\n    };\r\n  }\r\n}\r\n\r\n// Reset password with token\r\nexport async function resetPassword(\r\n  resetToken: string,\r\n  phoneNumber: string,\r\n  password: string,\r\n  rePassword: string,\r\n  captchaToken: string\r\n) {\r\n  try {\r\n    await AuthService.petInsurancePlatformUsersEndpointsAuthResetPasswordEndpoint(\r\n      {\r\n        requestBody: {\r\n          resetToken,\r\n          phoneNumber: phoneNumber,\r\n          newPassword: password,\r\n          confirmPassword: rePassword,\r\n          captchaToken : captchaToken\r\n        },\r\n      }\r\n    );\r\n    return { success: true };\r\n  } catch (error: any) {\r\n    console.error(\"Reset password error:\", error);\r\n    const errorDetails = handleApiErrorWithDetails(error, \"خطا در تغییر رمز عبور. لطفا دوباره تلاش کنید.\");\r\n    return {\r\n      success: false,\r\n      error: errorDetails.message,\r\n      status: errorDetails.status,\r\n      details: errorDetails.body,\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 636, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/matta/Desktop/Projects/saman-home-insurance/.next-internal/server/app/%28auth%29/login/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {checkRegistration as '6075ac5d6c663f8da0e777b782a227a562850e9713'} from 'ACTIONS_MODULE0'\nexport {requestForgotPassword as '60b35f19d9960d71df1461b6f58b6f644d6f957445'} from 'ACTIONS_MODULE0'\nexport {resendCode as '60e942b44d821644d8e483022613ff3d4407131d2f'} from 'ACTIONS_MODULE0'\nexport {resetPassword as '7c4906c4bb95f4b79b4386552128807984d4fa5785'} from 'ACTIONS_MODULE0'\nexport {verifyForgotPassword as '70185954439840c1c6769e8f5fe803729594d38c22'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 681, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/matta/Desktop/Projects/saman-home-insurance/src/app/%28auth%29/login/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(auth)/login/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(auth)/login/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,uYAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 695, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/matta/Desktop/Projects/saman-home-insurance/src/app/%28auth%29/login/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(auth)/login/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(auth)/login/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,uYAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA6Q,GAC1S,2CACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 709, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}